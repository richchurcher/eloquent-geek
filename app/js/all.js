function postForm(){return{link:function(t,o,s,e){t.create=function(t){e.createPost(t)}},require:"^postDisplay",scope:{post:"="},templateUrl:"/js/post/postForm.html"}}function postNav(){return{link:function(t,o,s,e){t.firstPost=function(){e.loadPost("first")},t.latestPost=function(){e.loadPost("latest")},t.previousPost=function(t){e.loadPost(t,"previous")},t.nextPost=function(t){e.loadPost(t,"next")}},require:"^postDisplay",scope:{id:"@"},templateUrl:"/js/post/postNav.html"}}function postDisplay(t,o){var s=function(){var s=this;s.loadPost=function(t,e){var r=new showdown.Converter,n={postId:t};return e&&(n.nav=e),o.get(n,function(t){t.body=r.makeHtml(t.body),s.post=t,s.style.css=t.style},function(){})},s.createPost=function(e){return e.tags||(e.tags=""),o.save({title:e.title,body:e.body,style:e.style,image:e.image,tags:e.tags.split(" ")},function(o){var e=new showdown.Converter;o.body=e.makeHtml(o.body),t.trustAsHtml(o.body),s.style.css=o.style,s.post=o})},s.post||s.loadPost("latest")};return{bindToController:!0,controller:s,controllerAs:"vm",scope:{style:"="},templateUrl:"/js/post/postDisplay.html"}}function postFactory(t){return t("/posts/:postId/:nav")}angular.module("eg",["post"]).config(["$resourceProvider",function(t){t.defaults.stripTrailingSlashes=!1}]).controller("EGCtrl",["$scope",function(t){t.style={css:"wombat"}}]),angular.module("post",["ngResource"]),angular.module("post").directive("postForm",[postForm]),angular.module("post").directive("postNav",[postNav]),angular.module("post").directive("postDisplay",["$sce","postApiService",postDisplay]).filter("trusted",["$sce",function(t){return function(o){return t.trustAsHtml(o)}}]),angular.module("post").factory("postApiService",["$resource",postFactory]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBvc3QvZm9ybS5kaXJlY3RpdmUuanMiLCJwb3N0L25hdi5kaXJlY3RpdmUuanMiLCJwb3N0L3Bvc3QuZGlyZWN0aXZlLmpzIiwicG9zdC9hcGkuc2VydmljZS5qcyIsImFwcC5qcyIsInBvc3QvcG9zdC5tb2R1bGUuanMiXSwibmFtZXMiOlsicG9zdEZvcm0iLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0cnMiLCJwb3N0Q3RybCIsImNyZWF0ZSIsInBvc3QiLCJjcmVhdGVQb3N0IiwicmVxdWlyZSIsInRlbXBsYXRlVXJsIiwicG9zdE5hdiIsImZpcnN0UG9zdCIsImxvYWRQb3N0IiwibGF0ZXN0UG9zdCIsInByZXZpb3VzUG9zdCIsImN1cnJlbnQiLCJuZXh0UG9zdCIsImlkIiwicG9zdERpc3BsYXkiLCIkc2NlIiwicG9zdEFwaVNlcnZpY2UiLCJjb250cm9sbGVyIiwidm0iLCJ0aGlzIiwibmF2IiwiY29udmVydGVyIiwic2hvd2Rvd24iLCJDb252ZXJ0ZXIiLCJwYXJhbXMiLCJwb3N0SWQiLCJnZXQiLCJyZXNwb25zZSIsImJvZHkiLCJtYWtlSHRtbCIsInN0eWxlIiwiY3NzIiwidGFncyIsInNhdmUiLCJ0aXRsZSIsImltYWdlIiwic3BsaXQiLCJ0cnVzdEFzSHRtbCIsImJpbmRUb0NvbnRyb2xsZXIiLCJjb250cm9sbGVyQXMiLCJwb3N0RmFjdG9yeSIsInJlc291cmNlIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyZXNvdXJjZVByb3ZpZGVyIiwiZGVmYXVsdHMiLCJzdHJpcFRyYWlsaW5nU2xhc2hlcyIsIiRzY29wZSIsImRpcmVjdGl2ZSIsImZpbHRlciIsInRleHQiLCJmYWN0b3J5Il0sIm1hcHBpbmdzIjoiQUFTQSxRQUFBQSxZQUNBLE9BQ0FDLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUgsRUFBQUksT0FBQSxTQUFBQyxHQUNBRixFQUFBRyxXQUFBRCxLQUdBRSxRQUFBLGVBQ0FQLE9BQ0FLLEtBQUEsS0FFQUcsWUFBQSwwQkNYQSxRQUFBQyxXQUNBLE9BQ0FWLEtBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUgsRUFBQVUsVUFBQSxXQUNBUCxFQUFBUSxTQUFBLFVBRUFYLEVBQUFZLFdBQUEsV0FDQVQsRUFBQVEsU0FBQSxXQUVBWCxFQUFBYSxhQUFBLFNBQUFDLEdBQ0FYLEVBQUFRLFNBQUFHLEVBQUEsYUFFQWQsRUFBQWUsU0FBQSxTQUFBRCxHQUNBWCxFQUFBUSxTQUFBRyxFQUFBLFVBR0FQLFFBQUEsZUFDQVAsT0FDQWdCLEdBQUEsS0FFQVIsWUFBQSx5QkNiQSxRQUFBUyxhQUFBQyxFQUFBQyxHQUVBLEdBQUFDLEdBQUEsV0FDQSxHQUFBQyxHQUFBQyxJQUVBRCxHQUFBVixTQUFBLFNBQUFLLEVBQUFPLEdBRUEsR0FBQUMsR0FBQSxHQUFBQyxVQUFBQyxVQUVBQyxHQUFBQyxPQUFBWixFQUlBLE9BSEFPLEtBQ0FJLEVBQUFKLElBQUFBLEdBRUFKLEVBQUFVLElBQUFGLEVBQUEsU0FBQUcsR0FDQUEsRUFBQUMsS0FBQVAsRUFBQVEsU0FBQUYsRUFBQUMsTUFDQVYsRUFBQWhCLEtBQUF5QixFQUNBVCxFQUFBWSxNQUFBQyxJQUFBSixFQUFBRyxPQUNBLGVBZUFaLEVBQUFmLFdBQUEsU0FBQUQsR0FFQSxNQURBQSxHQUFBOEIsT0FBQTlCLEVBQUE4QixLQUFBLElBQ0FoQixFQUFBaUIsTUFDQUMsTUFBQWhDLEVBQUFnQyxNQUNBTixLQUFBMUIsRUFBQTBCLEtBQ0FFLE1BQUE1QixFQUFBNEIsTUFDQUssTUFBQWpDLEVBQUFpQyxNQUNBSCxLQUFBOUIsRUFBQThCLEtBQUFJLE1BQUEsTUFDQSxTQUFBVCxHQUNBLEdBQUFOLEdBQUEsR0FBQUMsVUFBQUMsU0FDQUksR0FBQUMsS0FBQVAsRUFBQVEsU0FBQUYsRUFBQUMsTUFDQWIsRUFBQXNCLFlBQUFWLEVBQUFDLE1BQ0FWLEVBQUFZLE1BQUFDLElBQUFKLEVBQUFHLE1BQ0FaLEVBQUFoQixLQUFBeUIsS0FJQVQsRUFBQWhCLE1BQ0FnQixFQUFBVixTQUFBLFVBSUEsUUFDQThCLGtCQUFBLEVBQ0FyQixXQUFBQSxFQUNBc0IsYUFBQSxLQUNBMUMsT0FDQWlDLE1BQUEsS0FFQXpCLFlBQUEsNkJDcEVBLFFBQUFtQyxhQUFBQyxHQUNBLE1BQUFBLEdBQUEsdUJDVkFDLFFBRUFDLE9BQUEsTUFDQSxTQUdBQyxRQUNBLG9CQUNBLFNBQUFDLEdBQ0FBLEVBQUFDLFNBQUFDLHNCQUFBLEtBSUE5QixXQUFBLFVBQUEsU0FBQSxTQUFBK0IsR0FDQUEsRUFBQWxCLE9BQ0FDLElBQUEsYUNmQVcsUUFFQUMsT0FBQSxRQUNBLGVMSEFELFFBRUFDLE9BQUEsUUFFQU0sVUFBQSxZQUNBdEQsV0NMQStDLFFBRUFDLE9BQUEsUUFFQU0sVUFBQSxXQUNBM0MsVUNMQW9DLFFBRUFDLE9BQUEsUUFFQU0sVUFBQSxlQUNBLE9BQ0EsaUJBQ0FuQyxjQUdBb0MsT0FBQSxXQUFBLE9BQUEsU0FBQW5DLEdBQ0EsTUFBQSxVQUFBb0MsR0FDQSxNQUFBcEMsR0FBQXNCLFlBQUFjLE9DWkFULFFBRUFDLE9BQUEsUUFFQVMsUUFBQSxrQkFDQSxZQUNBWiIsImZpbGUiOiJqcy9hbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJhbmd1bGFyXG5cbiAgLm1vZHVsZSgncG9zdCcpXG5cbiAgLmRpcmVjdGl2ZSgncG9zdEZvcm0nLCBbXG4gICAgcG9zdEZvcm1cbiAgXSk7XG5cblxuZnVuY3Rpb24gcG9zdEZvcm0oKSB7XG4gIHJldHVybiB7XG4gICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgcG9zdEN0cmwpIHtcbiAgICAgIHNjb3BlLmNyZWF0ZSA9IGZ1bmN0aW9uIChwb3N0KSB7XG4gICAgICAgIHBvc3RDdHJsLmNyZWF0ZVBvc3QocG9zdCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXF1aXJlOiAnXnBvc3REaXNwbGF5JyxcbiAgICBzY29wZToge1xuICAgICAgcG9zdDogJz0nXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJy9qcy9wb3N0L3Bvc3RGb3JtLmh0bWwnXG4gIH07XG59XG5cbiIsImFuZ3VsYXJcblxuICAubW9kdWxlKCdwb3N0JylcblxuICAuZGlyZWN0aXZlKCdwb3N0TmF2JywgW1xuICAgIHBvc3ROYXZcbiAgXSk7XG5cblxuZnVuY3Rpb24gcG9zdE5hdigpIHtcbiAgcmV0dXJuIHtcbiAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBwb3N0Q3RybCkge1xuICAgICAgc2NvcGUuZmlyc3RQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBwb3N0Q3RybC5sb2FkUG9zdCgnZmlyc3QnKTtcbiAgICAgIH07XG4gICAgICBzY29wZS5sYXRlc3RQb3N0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBwb3N0Q3RybC5sb2FkUG9zdCgnbGF0ZXN0Jyk7XG4gICAgICB9O1xuICAgICAgc2NvcGUucHJldmlvdXNQb3N0ID0gZnVuY3Rpb24gKGN1cnJlbnQpIHtcbiAgICAgICAgcG9zdEN0cmwubG9hZFBvc3QoY3VycmVudCwgJ3ByZXZpb3VzJyk7XG4gICAgICB9O1xuICAgICAgc2NvcGUubmV4dFBvc3QgPSBmdW5jdGlvbiAoY3VycmVudCkge1xuICAgICAgICBwb3N0Q3RybC5sb2FkUG9zdChjdXJyZW50LCAnbmV4dCcpO1xuICAgICAgfTtcbiAgICB9LFxuICAgIHJlcXVpcmU6ICdecG9zdERpc3BsYXknLFxuICAgIHNjb3BlOiB7XG4gICAgICBpZDogJ0AnXG4gICAgfSxcbiAgICB0ZW1wbGF0ZVVybDogJy9qcy9wb3N0L3Bvc3ROYXYuaHRtbCdcbiAgfTtcbn1cblxuIiwiYW5ndWxhclxuXG4gIC5tb2R1bGUoJ3Bvc3QnKVxuXG4gIC5kaXJlY3RpdmUoJ3Bvc3REaXNwbGF5JywgW1xuICAgICckc2NlJyxcbiAgICAncG9zdEFwaVNlcnZpY2UnLFxuICAgIHBvc3REaXNwbGF5XG4gIF0pXG5cbiAgLmZpbHRlcigndHJ1c3RlZCcsIFsnJHNjZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sKHRleHQpO1xuICAgIH07XG4gIH1dKTtcblxuZnVuY3Rpb24gcG9zdERpc3BsYXkoJHNjZSwgcG9zdEFwaVNlcnZpY2UpIHtcblxuICB2YXIgY29udHJvbGxlciA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG5cbiAgICB2bS5sb2FkUG9zdCA9IGZ1bmN0aW9uKGlkLCBuYXYpIHtcbiAgICAgIC8vIE1hcmtkb3duXG4gICAgICB2YXIgY29udmVydGVyID0gbmV3IHNob3dkb3duLkNvbnZlcnRlcigpO1xuXG4gICAgICB2YXIgcGFyYW1zID0geyBwb3N0SWQ6IGlkIH07XG4gICAgICBpZiAobmF2KSB7XG4gICAgICAgIHBhcmFtcy5uYXYgPSBuYXY7XG4gICAgICB9XG4gICAgICByZXR1cm4gcG9zdEFwaVNlcnZpY2UuZ2V0KHBhcmFtcywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgIHJlc3BvbnNlLmJvZHkgPSBjb252ZXJ0ZXIubWFrZUh0bWwocmVzcG9uc2UuYm9keSk7XG4gICAgICAgIHZtLnBvc3QgPSByZXNwb25zZVxuICAgICAgICB2bS5zdHlsZS5jc3MgPSByZXNwb25zZS5zdHlsZTtcbiAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRXJyb3I6IGNvdWxkIGJlIGEgNDA0LCBubyBwb3N0cyBleGlzdFxuICAgICAgfSk7XG4gICAgfTtcbiAgICBcbiAgICAvL3ZtLmRlbGV0ZVBvc3QgPSBmdW5jdGlvbihpZCwgaSkge1xuICAgICAgLy9yZXR1cm4gcG9zdEFwaVNlcnZpY2UuZGVsZXRlKHtcbiAgICAgICAgLy9wb3N0SWQ6IGlkLFxuICAgICAgLy99KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvL3ZtLnBvc3RzLnNwbGljZShpLCAxKTtcbiAgICAgIC8vfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgLy8vLyBUT0RPOiBoYW5kbGUgZXJyb3JcbiAgICAgIC8vfSk7XG4gICAgLy99O1xuXG4gICAgdm0uY3JlYXRlUG9zdCA9IGZ1bmN0aW9uKHBvc3QpIHtcbiAgICAgIGlmICghcG9zdC50YWdzKSBwb3N0LnRhZ3MgPSAnJztcbiAgICAgIHJldHVybiBwb3N0QXBpU2VydmljZS5zYXZlKHtcbiAgICAgICAgdGl0bGU6IHBvc3QudGl0bGUsXG4gICAgICAgIGJvZHk6IHBvc3QuYm9keSxcbiAgICAgICAgc3R5bGU6IHBvc3Quc3R5bGUsXG4gICAgICAgIGltYWdlOiBwb3N0LmltYWdlLFxuICAgICAgICB0YWdzOiBwb3N0LnRhZ3Muc3BsaXQoJyAnKSxcbiAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICB2YXIgY29udmVydGVyID0gbmV3IHNob3dkb3duLkNvbnZlcnRlcigpO1xuICAgICAgICByZXNwb25zZS5ib2R5ID0gY29udmVydGVyLm1ha2VIdG1sKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICAkc2NlLnRydXN0QXNIdG1sKHJlc3BvbnNlLmJvZHkpO1xuICAgICAgICB2bS5zdHlsZS5jc3MgPSByZXNwb25zZS5zdHlsZTtcbiAgICAgICAgdm0ucG9zdCA9IHJlc3BvbnNlO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICghdm0ucG9zdCkge1xuICAgICAgdm0ubG9hZFBvc3QoJ2xhdGVzdCcpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4ge1xuICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgY29udHJvbGxlcjogY29udHJvbGxlcixcbiAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgc2NvcGU6IHtcbiAgICAgIHN0eWxlOiAnPSdcbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiAnL2pzL3Bvc3QvcG9zdERpc3BsYXkuaHRtbCdcbiAgfTtcbn1cblxuIiwiYW5ndWxhclxuXG4gIC5tb2R1bGUoJ3Bvc3QnKVxuXG4gIC5mYWN0b3J5KCdwb3N0QXBpU2VydmljZScsIFtcbiAgICAnJHJlc291cmNlJywgXG4gICAgcG9zdEZhY3RvcnlcbiAgXSk7XG5cbmZ1bmN0aW9uIHBvc3RGYWN0b3J5KHJlc291cmNlKSB7XG4gIHJldHVybiByZXNvdXJjZSgnL3Bvc3RzLzpwb3N0SWQvOm5hdicpO1xufVxuIiwiYW5ndWxhclxuXG4gIC5tb2R1bGUoJ2VnJywgW1xuICAgICdwb3N0JyxcbiAgXSlcblxuICAuY29uZmlnKFtcbiAgICAnJHJlc291cmNlUHJvdmlkZXInLCBcbiAgICBmdW5jdGlvbigkcmVzb3VyY2VQcm92aWRlcikge1xuICAgICAgJHJlc291cmNlUHJvdmlkZXIuZGVmYXVsdHMuc3RyaXBUcmFpbGluZ1NsYXNoZXMgPSBmYWxzZTtcbiAgICB9XG4gIF0pXG5cbiAgLmNvbnRyb2xsZXIoJ0VHQ3RybCcsIFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuICAgICRzY29wZS5zdHlsZSA9IHtcbiAgICAgIGNzczogJ3dvbWJhdCdcbiAgICB9O1xuICB9XSk7XG4iLCJhbmd1bGFyXG5cbiAgLm1vZHVsZSgncG9zdCcsIFtcbiAgICAnbmdSZXNvdXJjZSdcbiAgXSk7XG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==