function errSrc(){return{link:function(t,o,s){o.bind("error",function(){s.src!=s.errSrc&&s.$set("src",s.errSrc)}),s.$observe("ngSrc",function(t){!t&&s.errSrc&&s.$set("src",s.errSrc)})}}}function postForm(){return{link:function(t,o,s,r){t.create=function(){r.createPost()}},require:"^postDisplay",scope:!1,templateUrl:"/js/post/postForm.html"}}function postNav(){return{link:function(t,o,s,r){t.firstPost=function(){r.loadPost("first")},t.latestPost=function(){r.loadPost("latest")},t.previousPost=function(t){r.loadPost(t,"previous")},t.nextPost=function(t){r.loadPost(t,"next")},t.newPost=function(){r.newPost()}},require:"^postDisplay",scope:!1,templateUrl:"/js/post/postNav.html"}}function postDisplay(t,o){var s=function(){var s=this;s.loadPost=function(t,r){var e=new showdown.Converter,n={postId:t};return r&&(n.nav=r),o.get(n,function(t){t.body=e.makeHtml(t.body),s.post=t,s.style.css=t.style},function(){})},s.createPost=function(){return s.post.tags||(s.post.tags=""),o.save({title:s.post.title,body:s.post.body,style:s.post.style,image:s.post.image,tags:s.post.tags.split(" ")},function(o){var r=new showdown.Converter;o.body=r.makeHtml(o.body),t.trustAsHtml(o.body),s.style.css=o.style,s.post=o,s.showCreateForm=!1})},s.post||s.loadPost("latest"),s.newPost=function(){for(var t in s.post)s.post[t]=null;s.showCreateForm=!0,s.style.css=""}};return{bindToController:!0,controller:s,controllerAs:"vm",scope:{style:"="},templateUrl:"/js/post/postDisplay.html"}}function postFactory(t){return t("/posts/:postId/:nav")}angular.module("eg",["post"]).config(["$resourceProvider",function(t){t.defaults.stripTrailingSlashes=!1}]).controller("EGCtrl",["$scope",function(t){t.style={css:"wombat"}}]),angular.module("post",["ngResource"]),angular.module("post").directive("errSrc",[errSrc]),angular.module("post").directive("postForm",[postForm]),angular.module("post").directive("postNav",[postNav]),angular.module("post").directive("postDisplay",["$sce","postApiService",postDisplay]).filter("trusted",["$sce",function(t){return function(o){return t.trustAsHtml(o)}}]),angular.module("post").factory("postApiService",["$resource",postFactory]);
//# sourceMappingURL=data:application/json;base64,